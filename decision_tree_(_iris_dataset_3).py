# -*- coding: utf-8 -*-
"""Decision Tree ( iris dataset 3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14aS0AWvEF9At0qee3noazG9rgJY7589X
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the Iris dataset
df = pd.read_csv('iris.csv')

# Display basic information about the dataset
print("First few rows of the dataset:\n", df.head())
print("\nUnique classes in target variable:", df['Species'].nunique())

# Define the features (X) and the target variable (y)
X = df.drop(columns=['Species'])  # All features except 'Species'
y = df['Species']  # The target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Output the shape of the train and test sets
print("\nTraining set size:", X_train.shape)
print("Testing set size:", X_test.shape)

# Create and train the Decision Tree Classifier
decision_tree = DecisionTreeClassifier(random_state=0)
decision_tree.fit(X_train, y_train)

# Display information that the model has been trained
print("\nDecision Tree has been trained on the training set.")

# Make predictions using the test set
y_pred = decision_tree.predict(X_test)

# Evaluate the model: Accuracy and Confusion Matrix
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Display accuracy and the confusion matrix
print("\nModel Accuracy: {:.2f}%".format(accuracy * 100))
print("Confusion Matrix:\n", conf_matrix)