# -*- coding: utf-8 -*-
"""PCA_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1svkcSj3bwP5RiDz8FnzE3N-H0n_3B_wT
"""

import pandas as pd
from sklearn.datasets import load_wine

# Load the Wine dataset
wine_data = load_wine()
features = wine_data.data
labels = wine_data.target

# Create a DataFrame for exploratory data analysis
wine_df = pd.DataFrame(features, columns=wine_data.feature_names)
wine_df['class'] = labels
wine_df.head()

from sklearn.model_selection import train_test_split

# Divide the dataset into 70% training and 30% testing
train_features, test_features, train_labels, test_labels = train_test_split(
    features, labels, test_size=0.3, random_state=42, stratify=labels)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Train Logistic Regression model without PCA
log_reg_model = LogisticRegression(max_iter=10000)
log_reg_model.fit(train_features, train_labels)

# Make predictions and evaluate the model
predictions_baseline = log_reg_model.predict(test_features)

# Calculate performance metrics
accuracy_baseline = accuracy_score(test_labels, predictions_baseline)
precision_baseline = precision_score(test_labels, predictions_baseline, average='weighted')
recall_baseline = recall_score(test_labels, predictions_baseline, average='weighted')

print(f"Baseline Accuracy: {accuracy_baseline}")
print(f"Baseline Precision: {precision_baseline}")
print(f"Baseline Recall: {recall_baseline}")

from sklearn.decomposition import PCA

# Function to perform PCA and train the Logistic Regression model
def pca_and_train_model(n_components):
    pca_instance = PCA(n_components=n_components)

    # Perform PCA transformation on training data
    pca_train_features = pca_instance.fit_transform(train_features)

    # Apply the same PCA transformation to test data
    pca_test_features = pca_instance.transform(test_features)

    # Train Logistic Regression on the PCA-transformed data
    logistic_model = LogisticRegression(max_iter=10000)
    logistic_model.fit(pca_train_features, train_labels)

    # Make predictions and evaluate the model
    predictions_pca = logistic_model.predict(pca_test_features)

    acc = accuracy_score(test_labels, predictions_pca)
    prec = precision_score(test_labels, predictions_pca, average='weighted')
    rec = recall_score(test_labels, predictions_pca, average='weighted')

    return acc, prec, rec

# Evaluate different numbers of PCA components
num_components = [2, 5, 10]
evaluation_results = {}

for components in num_components:
    acc, prec, rec = pca_and_train_model(components)
    evaluation_results[components] = {'Accuracy': acc, 'Precision': prec, 'Recall': rec}
    print(f"PCA with {components} components: Accuracy={acc}, Precision={prec}, Recall={rec}")