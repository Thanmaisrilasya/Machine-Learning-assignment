# -*- coding: utf-8 -*-
"""LDA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N87Z5A94MvveY9rJQaswjYFTgTJ3Ky3Z
"""

# 1. Load Libraries and Dataset
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import numpy as np

# 2. Load Dataset
data = load_wine()
X, y = data.data, data.target

# 3. Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. Train LDA Model
lda = LinearDiscriminantAnalysis()
lda.fit(X_train, y_train)

# 5. Evaluate LDA Model
y_pred_lda = lda.predict(X_test)
accuracy_lda = accuracy_score(y_test, y_pred_lda)
precision_lda = precision_score(y_test, y_pred_lda, average='weighted')
recall_lda = recall_score(y_test, y_pred_lda, average='weighted')
confusion_lda = confusion_matrix(y_test, y_pred_lda)

# 6. Train Logistic Regression Model
log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)

# 7. Evaluate Logistic Regression Model
y_pred_log = log_reg.predict(X_test)
accuracy_log = accuracy_score(y_test, y_pred_log)
precision_log = precision_score(y_test, y_pred_log, average='weighted')
recall_log = recall_score(y_test, y_pred_log, average='weighted')
confusion_log = confusion_matrix(y_test, y_pred_log)

# 8. Print Classification Reports and Confusion Matrices
print("LDA Classification Report:")
print(classification_report(y_test, y_pred_lda))
print("LDA Confusion Matrix:")
print(confusion_lda)

print("\nLogistic Regression Classification Report:")
print(classification_report(y_test, y_pred_log))
print("Logistic Regression Confusion Matrix:")
print(confusion_log)

# 9. Decision Boundary Visualization (Optional)
# Define plot_decision_boundary function
def plot_decision_boundary(model, X, y, title="Decision Boundary"):
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                         np.arange(y_min, y_max, 0.1))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, alpha=0.3)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k', marker='o')
    plt.title(title)

# Reduce Data to 2D
X_2d = PCA(n_components=2).fit_transform(X)
X_train_2d, X_test_2d, y_train_2d, y_test_2d = train_test_split(X_2d, y, test_size=0.3, random_state=42)

# LDA Decision Boundaries
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
lda_2d = LinearDiscriminantAnalysis()
lda_2d.fit(X_train_2d, y_train_2d)
plot_decision_boundary(lda_2d, X_2d, y, title="LDA Decision Boundary")

# Logistic Regression Decision Boundaries
plt.subplot(1, 2, 2)
log_reg_2d = LogisticRegression(max_iter=1000)
log_reg_2d.fit(X_train_2d, y_train_2d)
plot_decision_boundary(log_reg_2d, X_2d, y, title="Logistic Regression Decision Boundary")

plt.tight_layout()  # Adjust layout for better spacing
plt.show()